{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yakamble\\\\Desktop\\\\new_react\\\\React_Course\\\\Section-20\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventPage.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom\";\n\n// function EventPage() {\n\n//     const DUMMTEVENTS = [\n//       {\n//         id:'e1',\n//         title: \"Event 1\"\n//       },\n//       {\n//         id:'e2',\n//         title: \"Event 2\"\n//       }\n//     ]\n//     return (\n//       <>\n//         EventPage\n//         <ul>{DUMMTEVENTS.map((event) => \n//         <li><Link key= {event.id} to={event.id}>{event.title}</Link></li>)}</ul>\n//       </>\n//     );\n//   }\n\n//   export default EventPage;\n\nimport { useEffect, useState } from 'react';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchedEvents, setFetchedEvents] = useState();\n  const [error, setError] = useState();\n  useEffect(() => {\n    async function fetchEvents() {\n      setIsLoading(true);\n      const response = await fetch('http://localhost:8080/events');\n      if (!response.ok) {\n        setError('Fetching events failed.');\n      } else {\n        const resData = await response.json();\n        setFetchedEvents(resData.events);\n      }\n      setIsLoading(false);\n    }\n    fetchEvents();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), !isLoading && fetchedEvents && /*#__PURE__*/_jsxDEV(EventsList, {\n      events: fetchedEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true);\n}\n_s(EventsPage, \"qNzRHA+sE7qujjZhWBEU6UvtUuo=\");\n_c = EventsPage;\nexport default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useEffect","useState","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","isLoading","setIsLoading","fetchedEvents","setFetchedEvents","error","setError","fetchEvents","response","fetch","ok","resData","json","events","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yakamble/Desktop/new_react/React_Course/Section-20/12-adv-starting-project/frontend/src/pages/EventPage.js"],"sourcesContent":["// import { Link } from \"react-router-dom\";\r\n\r\n// function EventPage() {\r\n\r\n//     const DUMMTEVENTS = [\r\n//       {\r\n//         id:'e1',\r\n//         title: \"Event 1\"\r\n//       },\r\n//       {\r\n//         id:'e2',\r\n//         title: \"Event 2\"\r\n//       }\r\n//     ]\r\n//     return (\r\n//       <>\r\n//         EventPage\r\n//         <ul>{DUMMTEVENTS.map((event) => \r\n//         <li><Link key= {event.id} to={event.id}>{event.title}</Link></li>)}</ul>\r\n//       </>\r\n//     );\r\n//   }\r\n  \r\n//   export default EventPage;\r\n\r\n\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [fetchedEvents, setFetchedEvents] = useState();\r\n  const [error, setError] = useState();\r\n\r\n  useEffect(() => {\r\n    async function fetchEvents() {\r\n      setIsLoading(true);\r\n      const response = await fetch('http://localhost:8080/events');\r\n\r\n      if (!response.ok) {\r\n        setError('Fetching events failed.');\r\n      } else {\r\n        const resData = await response.json();\r\n        setFetchedEvents(resData.events);\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n\r\n    fetchEvents();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div style={{ textAlign: 'center' }}>\r\n        {isLoading && <p>Loading...</p>}\r\n        {error && <p>{error}</p>}\r\n      </div>\r\n      {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventsPage;"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,CAAC;EACpD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,eAAee,WAAWA,CAAA,EAAG;MAC3BL,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;MAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChBJ,QAAQ,CAAC,yBAAyB,CAAC;MACrC,CAAC,MAAM;QACL,MAAMK,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACrCR,gBAAgB,CAACO,OAAO,CAACE,MAAM,CAAC;MAClC;MACAX,YAAY,CAAC,KAAK,CAAC;IACrB;IAEAK,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EACN,oBACEX,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACElB,OAAA;MAAKmB,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,GACjCb,SAAS,iBAAIL,OAAA;QAAAkB,QAAA,EAAG;MAAU;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAC9Bf,KAAK,iBAAIT,OAAA;QAAAkB,QAAA,EAAIT;MAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,EACL,CAACnB,SAAS,IAAIE,aAAa,iBAAIP,OAAA,CAACF,UAAU;MAACmB,MAAM,EAAEV;IAAc;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACrE,CAAC;AAEP;AAACpB,EAAA,CA9BQD,UAAU;AAAAsB,EAAA,GAAVtB,UAAU;AAgCnB,eAAeA,UAAU;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}